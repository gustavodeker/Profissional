CREATE TABLE users (
    user_id int(11) PRIMARY KEY AUTO_INCREMENT,
    user_name varchar(50) UNIQUE NOT NULL,
    user_login varchar(50) UNIQUE NOT NULL,
    user_pass varchar(255) NOT NULL,
    user_level varchar(10) NOT NULL,
    user_token varchar(255) NULL
);

CREATE TABLE machines (
    machine_id int(11) PRIMARY KEY AUTO_INCREMENT,
    machine_name varchar(50) UNIQUE NOT NULL,
    machine_marca varchar(255) NOT NULL,
    machine_users varchar(255) NULL,
    machine_pn varchar(50) NULL,
    FOREIGN KEY (machine_pn) REFERENCES itens(item_pn)
);

CREATE TABLE codes (
    code_id int(11) PRIMARY KEY AUTO_INCREMENT,
    code_code varchar(50) UNIQUE NOT NULL,
    code_desc varchar(255) NOT NULL,
    code_processo varchar(4) NOT NULL
);

CREATE TABLE itens (
    item_id int(11) PRIMARY KEY AUTO_INCREMENT,
    item_pn varchar(50) UNIQUE NOT NULL,
    item_pn_desc varchar(255) NOT NULL,
    item_setor_cod int(11) NOT NULL,
    item_setor_name varchar(50) NOT NULL,
    item_prodtotal int(11),
    item_refugototal int(11),
    item_ppm DECIMAL(11,0) GENERATED ALWAYS AS ((NULLIF(item_refugototal, 0) / NULLIF(item_prodtotal, 0)) * 1000000) STORED
);

CREATE TABLE auxprod (
    auxprod_id int(11) PRIMARY KEY AUTO_INCREMENT,
    auxprod_machine_name varchar(50) NOT NULL,
    auxprod_value int(11) NULL,
    prod_datetime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE prod (
    prod_id int(11) PRIMARY KEY AUTO_INCREMENT,
    prod_machine_name varchar(50) NOT NULL,
    prod_item_pn varchar(50) NULL,
    prod_item_pn_desc varchar(255) NULL,
    prod_item_setor_cod int(11) NULL,
    prod_item_setor_name varchar(50) NULL,
    prod_value int(11) NULL,
    prod_datetime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
    prod_user_name varchar(50) NULL,
    prod_reason varchar(255) NULL,
    FOREIGN KEY (prod_user_name) REFERENCES users(user_name),
    FOREIGN KEY (prod_machine_name) REFERENCES machines(machine_name),
    FOREIGN KEY (prod_item_pn) REFERENCES itens(item_pn)
);

CREATE TABLE refuse (
    refuse_id int(11) PRIMARY KEY AUTO_INCREMENT,
    refuse_machine_name varchar(50) NOT NULL,
    refuse_item_pn varchar(50) NOT NULL,
    refuse_item_pn_desc varchar(255) NOT NULL,
    refuse_item_setor_cod int(11) NOT NULL,
    refuse_item_setor_name varchar(50) NOT NULL,
    refuse_code_code varchar(50) NOT NULL,
    refuse_code_desc varchar(255) NOT NULL,
    refuse_code_processo varchar(4) NOT NULL,
    refuse_setor_area varchar(255) AS (CONCAT(refuse_item_setor_name, ' - ', refuse_code_processo)),
    refuse_value int(11) NOT NULL,
    refuse_datetime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
    refuse_user_name varchar(50) NOT NULL,
    FOREIGN KEY (refuse_user_name) REFERENCES users(user_name),
    FOREIGN KEY (refuse_machine_name) REFERENCES machines(machine_name),
    FOREIGN KEY (refuse_item_pn) REFERENCES itens(item_pn),
    FOREIGN KEY (refuse_code_code) REFERENCES codes(code_code)
);


CREATE TABLE proddia (
    proddia_id int(11) PRIMARY KEY AUTO_INCREMENT,
    proddia_item_pn varchar(50) NOT NULL,
    proddia_item_pn_desc varchar(255) NOT NULL,
    proddia_item_setor_cod int(11) NOT NULL,
    proddia_item_setor_name varchar(50) NOT NULL,
    proddia_value int(11) NOT NULL,
    proddia_datetime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
);


CREATE TRIGGER trigger_insert_proddia
AFTER INSERT ON prod
FOR EACH ROW
BEGIN
    DECLARE existente INT;
    SELECT COUNT(*) INTO existente FROM proddia WHERE proddia_item_pn = NEW.prod_item_pn AND DATE(proddia_datetime) = DATE(NEW.prod_datetime);
    IF existente > 0 THEN
        UPDATE proddia SET proddia_value = proddia_value + NEW.prod_value WHERE proddia_item_pn = NEW.prod_item_pn AND DATE(proddia_datetime) = DATE(NEW.prod_datetime);
    ELSE
        INSERT INTO proddia (proddia_item_pn, proddia_item_pn_desc, proddia_item_setor_cod, proddia_item_setor_name, proddia_value, proddia_datetime)
        VALUES (NEW.prod_item_pn, NEW.prod_item_pn_desc, NEW.prod_item_setor_cod, NEW.prod_item_setor_name, NEW.prod_value, DATE(NEW.prod_datetime));
    END IF;
END;